name: Monorepo CI/CD

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]

env:
  NODE_VERSION: '22.17.0'  # Matches .nvmrc

jobs:
  # Job 1: Lint entire monorepo
  lint:
    name: Lint All Workspaces
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint --workspaces --if-present || echo "⚠️ Linting completed with warnings"
        continue-on-error: true

  # Job 2: Run tests
  test:
    name: Test All Workspaces
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Run tests
        run: npm run test --workspaces --if-present || echo "⚠️ Some tests failed or no tests found"
        continue-on-error: true

      - name: Generate test coverage
        run: npm run test:cov --workspaces --if-present || echo "⚠️ Coverage generation skipped"
        continue-on-error: true

  # Job 3: Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate || echo "⚠️ Vulnerabilities found (non-blocking)"
          echo "See SECURITY.md for known vulnerabilities and remediation plan"
        continue-on-error: true

      - name: Check for secrets
        run: |
          echo "🔍 Checking for hardcoded secrets..."
          ! git diff --cached | grep -E "(api[_-]?key|secret[_-]?key|password|bearer|token|private[_-]?key)\s*=\s*[\"'][A-Za-z0-9+/=]{20,}"
        continue-on-error: true

  # Job 4: Build all workspaces
  build:
    name: Build All Workspaces
    runs-on: ubuntu-latest
    needs: [lint, test]

    strategy:
      matrix:
        workspace:
          - futura-tickets-admin-api
          - futura-market-place-api
          - futura-access-api
          - futura-tickets-admin
          - futura-market-place-v2

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.workspace }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.workspace }}
        run: npm install --legacy-peer-deps

      - name: Build project
        working-directory: ${{ matrix.workspace }}
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.workspace }}
          path: ${{ matrix.workspace }}/dist
          retention-days: 7

  # Job 5: Type checking
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Run TypeScript compiler
        run: npx tsc --noEmit --skipLibCheck || echo "⚠️ Type errors found (non-blocking)"
        continue-on-error: true

  # Job 6: CI Summary
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, security, build, typecheck]
    if: always()

    steps:
      - name: Generate summary
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'Lint': '${{ needs.lint.result }}',
              'Tests': '${{ needs.test.result }}',
              'Security': '${{ needs.security.result }}',
              'Build': '${{ needs.build.result }}',
              'TypeCheck': '${{ needs.typecheck.result }}'
            };

            let summary = '## 🔍 CI/CD Pipeline Summary\n\n';
            summary += '| Check | Status |\n';
            summary += '|-------|--------|\n';

            for (const [check, result] of Object.entries(results)) {
              const icon = result === 'success' ? '✅' :
                           result === 'skipped' ? '⊘' :
                           result === 'cancelled' ? '🚫' : '❌';
              summary += `| ${check} | ${icon} ${result} |\n`;
            }

            summary += '\n---\n';
            summary += '**Node Version:** ${{ env.NODE_VERSION }}\n';
            summary += '**Branch:** ${{ github.ref_name }}\n';
            summary += '**Commit:** ${{ github.sha }}\n';

            // Add to job summary
            await core.summary
              .addRaw(summary)
              .write();

            // Comment on PR if this is a pull request
            if (context.payload.pull_request) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

            // Fail if critical jobs failed
            const criticalJobs = ['lint', 'build'];
            const hasFailure = criticalJobs.some(job => results[job.charAt(0).toUpperCase() + job.slice(1)] === 'failure');

            if (hasFailure) {
              core.setFailed('Critical CI checks failed');
            }

  # Job 7: Notify on failure (optional)
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint, test, security, build]
    if: failure()

    steps:
      - name: Create issue on failure
        uses: actions/github-script@v7
        with:
          script: |
            const title = `CI Failed on ${context.ref}`;
            const body = `
            ## CI Pipeline Failed

            **Branch:** ${context.ref}
            **Commit:** ${context.sha}
            **Workflow:** ${context.workflow}
            **Run:** ${context.runNumber}

            **Results:**
            - Lint: ${{ needs.lint.result }}
            - Tests: ${{ needs.test.result }}
            - Security: ${{ needs.security.result }}
            - Build: ${{ needs.build.result }}

            [View workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            `;

            // Only create issue for main/dev branches
            if (context.ref === 'refs/heads/main' || context.ref === 'refs/heads/dev') {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['ci-failure', 'bug']
              });
            }
