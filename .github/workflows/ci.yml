name: CI Pipeline
on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
jobs:
  test-backends:
    name: Backend APIs Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - futura-tickets-admin-api
          - futura-market-place-api
          - futura-access-api
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false
      - uses: actions/setup-node@v4
        with:
          node-version: '22.17.0'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json
      - name: Install and Build
        working-directory: ./${{ matrix.service }}
        run: |
          npm ci --legacy-peer-deps
          npm run build
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false
      - name: Check for secrets
        run: |
          echo "üîç Scanning for real secrets (excluding documentation and examples)..."

          # Exclude documentation, examples, and test files
          EXCLUDE_PATTERNS=(
            "*.md"
            "*.example"
            "*.md.txt"
            ".env.example"
            ".env.*.example"
            "docs/"
            "test/"
            "tests/"
            "__tests__/"
            "*.test.*"
            "*.spec.*"
          )

          # Build exclude args for grep
          EXCLUDE_ARGS=""
          for pattern in "${EXCLUDE_PATTERNS[@]}"; do
            EXCLUDE_ARGS="$EXCLUDE_ARGS --exclude=$pattern"
          done

          # Search only in actual code files
          if git grep $EXCLUDE_ARGS -E "(sk_live_[A-Za-z0-9]{24,}|pk_live_[A-Za-z0-9]{24,}|mongodb\+srv://[^/]+:[^@]+@)" -- "*.ts" "*.tsx" "*.js" "*.jsx" "*.json" "*.yml" "*.yaml" ".env" 2>/dev/null; then
            echo "‚ùå ERROR: Real secrets detected in code!"
            echo "Please remove secrets and use environment variables instead."
            exit 1
          fi

          echo "‚úÖ No real secrets detected in code files"
      - name: Check for .env files
        run: |
          echo "üîç Checking for committed .env files..."

          # Allow .env.example files but not real .env files
          if git ls-files | grep -E "\.env$" | grep -v "\.env\.example$"; then
            echo "‚ùå ERROR: .env files should not be committed!"
            echo "Please remove them and add to .gitignore"
            exit 1
          fi

          echo "‚úÖ No .env files committed (except .example files)"
