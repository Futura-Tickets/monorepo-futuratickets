name: CI/CD Pipeline

on:
  push:
    branches: [main, dev, develop]
  pull_request:
    branches: [main, dev, develop]

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io

jobs:
  # ========================================
  # CODE QUALITY CHECKS
  # ========================================

  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - futura-tickets-admin-api
          - futura-market-place-api
          - futura-access-api
          - futura-market-place-v2
          - futura-tickets-admin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: npm ci

      - name: Run ESLint
        working-directory: ${{ matrix.service }}
        run: npm run lint --if-present
        continue-on-error: true

      - name: Check formatting
        working-directory: ${{ matrix.service }}
        run: npx prettier --check . --ignore-path ../.gitignore
        continue-on-error: true

  # ========================================
  # BACKEND TESTS
  # ========================================

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        service:
          - futura-tickets-admin-api
          - futura-market-place-api
          - futura-access-api

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: npm ci

      - name: Run unit tests
        working-directory: ${{ matrix.service }}
        run: npm run test --if-present
        env:
          MONGO_URL: mongodb://testuser:testpass@localhost:27017/test?authSource=admin
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Run E2E tests
        working-directory: ${{ matrix.service }}
        run: npm run test:e2e --if-present
        env:
          MONGO_URL: mongodb://testuser:testpass@localhost:27017/test?authSource=admin
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ${{ matrix.service }}/coverage/lcov.info
          flags: ${{ matrix.service }}
        continue-on-error: true

  # ========================================
  # FRONTEND TESTS & BUILD
  # ========================================

  test-frontend:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - futura-market-place-v2
          - futura-tickets-admin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: npm ci

      - name: Run tests
        working-directory: ${{ matrix.service }}
        run: npm run test --if-present
        continue-on-error: true

      - name: Build application
        working-directory: ${{ matrix.service }}
        run: npm run build
        env:
          NEXT_PUBLIC_FUTURA_API: http://localhost:4101
          NEXT_PUBLIC_FUTURA: http://localhost:4102
          NEXT_PUBLIC_REFACTOR_RESALE_API: http://localhost:4103

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-build
          path: ${{ matrix.service }}/.next
          retention-days: 7

  # ========================================
  # DOCKER BUILD & PUSH
  # ========================================

  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-backend, test-frontend]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service:
          - name: admin-api
            context: futura-tickets-admin-api
          - name: marketplace-api
            context: futura-market-place-api
          - name: access-api
            context: futura-access-api
          - name: marketplace-web
            context: futura-market-place-v2
          - name: admin-web
            context: futura-tickets-admin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ========================================
  # SECURITY SCANNING
  # ========================================

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - futura-tickets-admin-api
          - futura-market-place-api
          - futura-access-api
          - futura-market-place-v2
          - futura-tickets-admin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        working-directory: ${{ matrix.service }}
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: ${{ matrix.service }}
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

  # ========================================
  # SMOKE TESTS
  # ========================================

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start infrastructure
        run: |
          docker compose -f docker-compose.infra.yml up -d
          sleep 30

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies for smoke tests
        run: |
          if [ -f "tests/package.json" ]; then
            cd tests && npm ci
          fi

      - name: Run smoke tests
        run: |
          if [ -x "./tests/smoke-test.sh" ]; then
            ./tests/smoke-test.sh
          else
            echo "No smoke tests found"
          fi

      - name: Cleanup
        if: always()
        run: docker compose -f docker-compose.infra.yml down -v

  # ========================================
  # DEPLOYMENT NOTIFICATION
  # ========================================

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan, smoke-tests]
    if: success() && github.event_name == 'push'

    steps:
      - name: Send success notification
        run: |
          echo "âœ… CI/CD Pipeline completed successfully for ${{ github.ref }}"
          # Add Slack/Discord webhook here if needed
