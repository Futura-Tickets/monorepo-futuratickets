name: Feature Branch CI

on:
  pull_request:
    branches: [dev]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '22.17.0'

jobs:
  detect-changes:
    name: Detect Changed Projects
    runs-on: ubuntu-latest
    outputs:
      admin-api: ${{ steps.filter.outputs.admin-api }}
      admin-frontend: ${{ steps.filter.outputs.admin-frontend }}
      marketplace: ${{ steps.filter.outputs.marketplace }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            admin-api:
              - 'futura-tickets-admin-api/**'
            admin-frontend:
              - 'futura-tickets-admin/**'
            marketplace:
              - 'futura-market-place-v2/**'

  lint-admin-api:
    name: Lint Admin API
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.admin-api == 'true'
    defaults:
      run:
        working-directory: futura-tickets-admin-api

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: futura-tickets-admin-api/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint || echo "‚ö†Ô∏è Linting completed with warnings"

  lint-admin-frontend:
    name: Lint Admin Frontend
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.admin-frontend == 'true'
    defaults:
      run:
        working-directory: futura-tickets-admin

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: futura-tickets-admin/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint || echo "‚ö†Ô∏è Linting completed with warnings"

  lint-marketplace:
    name: Lint Marketplace
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.marketplace == 'true'
    defaults:
      run:
        working-directory: futura-market-place-v2

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: futura-market-place-v2/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint || echo "‚ö†Ô∏è Linting completed with warnings"

  build-admin-api:
    name: Build Admin API
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-admin-api]
    if: |
      always() &&
      needs.detect-changes.outputs.admin-api == 'true' &&
      (needs.lint-admin-api.result == 'success' || needs.lint-admin-api.result == 'skipped')
    defaults:
      run:
        working-directory: futura-tickets-admin-api

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: futura-tickets-admin-api/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

  build-admin-frontend:
    name: Build Admin Frontend
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-admin-frontend]
    if: |
      always() &&
      needs.detect-changes.outputs.admin-frontend == 'true' &&
      (needs.lint-admin-frontend.result == 'success' || needs.lint-admin-frontend.result == 'skipped')
    defaults:
      run:
        working-directory: futura-tickets-admin

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: futura-tickets-admin/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

  build-marketplace:
    name: Build Marketplace
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-marketplace]
    if: |
      always() &&
      needs.detect-changes.outputs.marketplace == 'true' &&
      (needs.lint-marketplace.result == 'success' || needs.lint-marketplace.result == 'skipped')
    defaults:
      run:
        working-directory: futura-market-place-v2

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: futura-market-place-v2/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

  pr-comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [build-admin-api, build-admin-frontend, build-marketplace]
    if: always()

    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'Admin API': '${{ needs.build-admin-api.result }}',
              'Admin Frontend': '${{ needs.build-admin-frontend.result }}',
              'Marketplace': '${{ needs.build-marketplace.result }}'
            };

            let comment = '## üîç CI Results\n\n';
            for (const [project, result] of Object.entries(results)) {
              const icon = result === 'success' ? '‚úÖ' : result === 'skipped' ? '‚äò' : '‚ùå';
              comment += `${icon} **${project}**: ${result}\n`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
