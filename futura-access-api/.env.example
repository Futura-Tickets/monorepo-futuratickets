# =============================================================================
# FUTURA ACCESS API - Environment Variables
# =============================================================================
# NestJS backend for ticket validation and access control
# Port: 4103 (default)
# =============================================================================

# -----------------------------------------------------------------------------
# APPLICATION
# -----------------------------------------------------------------------------
PORT=4103
NODE_ENV=development

# -----------------------------------------------------------------------------
# DATABASE - MongoDB
# -----------------------------------------------------------------------------
# MongoDB connection string (shared with marketplace API)
# Development: mongodb://localhost:27017/futuratickets
# Production: mongodb+srv://user:password@cluster.mongodb.net/futuratickets
MONGO_URL=mongodb://localhost:27017/futuratickets

# -----------------------------------------------------------------------------
# AUTHENTICATION - JWT
# -----------------------------------------------------------------------------
# Secret key for JWT token signing (MUST MATCH marketplace-api for SSO)
# Generate with: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
#
# CRITICAL: JWT_SECRET_KEY must be IDENTICAL across ALL APIs:
#   - futura-tickets-admin-api
#   - futura-market-place-api
#   - futura-access-api
# This ensures tokens are valid across all microservices for Single Sign-On (SSO).
# If keys don't match, users will get "Unauthorized" errors when switching between apps.
#
# Example generated key: 9d2cacb7a249ce9cc1cc9b42d3259a57137012a25ee71753b6e89d78491e782f4546e5dffca3e78d8cff419308939e0c9eacce631104e6b2d2013bf55437ab5f
JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production

# -----------------------------------------------------------------------------
# WEBSOCKET - Azure Web PubSub
# -----------------------------------------------------------------------------
# Azure Web PubSub for real-time access notifications
# Get from: Azure Portal > Web PubSub > Keys
# Format: Endpoint=https://...;AccessKey=...;Version=1.0;
# Hub name: Centro
SOCKET_ACCESS=Endpoint=https://your-access-pubsub.webpubsub.azure.com;AccessKey=your-access-key;Version=1.0;

# -----------------------------------------------------------------------------
# RATE LIMITING - DDoS Protection
# -----------------------------------------------------------------------------
# Throttle configuration for API endpoints
# TTL: Time window in milliseconds (60000 = 1 minute)
# LIMIT: Max requests per window (higher for access validation)
THROTTLE_TTL=60000
THROTTLE_LIMIT=100

# -----------------------------------------------------------------------------
# OPTIONAL - Development/Testing
# -----------------------------------------------------------------------------
# Log level (error, warn, info, debug, verbose)
# LOG_LEVEL=debug

# Enable CORS for frontend apps (comma-separated origins)
# CORS_ORIGINS=http://localhost:3001,http://localhost:3000

# =============================================================================
# WEBSOCKET CONFIGURATION
# =============================================================================
# Socket.IO Configuration:
# - Port: 443 (default for wss://)
# - Ping timeout: 10000ms
# - Hub: Centro (Azure PubSub hub name)
# - Events emitted:
#   - check-in (when ticket is validated)
#   - access-denied (when validation fails)
#   - event-stats (real-time statistics)
# =============================================================================

# =============================================================================
# ACCESS CONTROL WORKFLOW
# =============================================================================
# 1. ACCESS role user logs in (POST /accounts/login)
# 2. Receives JWT token with accessEvent assigned
# 3. Scans QR code (sale._id from ticket)
# 4. Validates ticket (PATCH /events/access)
# 5. System checks:
#    - Ticket status (OPEN → allow, CLOSED → deny)
#    - Promoter match
#    - Event match
# 6. Updates ticket status and history
# 7. Emits WebSocket event to all connected promoter clients
# 8. Displays validation result on device
# =============================================================================

# =============================================================================
# PRODUCTION CHECKLIST
# =============================================================================
# [ ] Change JWT_SECRET_KEY (MUST match other APIs)
# [ ] Configure production MongoDB Atlas cluster
# [ ] Set up Azure Web PubSub with proper CORS and auth
# [ ] Configure rate limiting for high-traffic events
# [ ] Set NODE_ENV=production
# [ ] Enable HTTPS for all WebSocket connections (wss://)
# [ ] Test WebSocket reconnection logic
# [ ] Configure load balancer for multiple instances
# [ ] Set up monitoring for ticket validation failures
# [ ] Configure backup WebSocket endpoint
# =============================================================================

# =============================================================================
# IMPORTANT SECURITY NOTES
# =============================================================================
# - NEVER commit this file with real values to git
# - JWT_SECRET_KEY must be identical across all APIs for token validation
# - Store production secrets in secure vault (AWS Secrets Manager, Azure Key Vault)
# - Monitor failed validation attempts for fraud
# - Configure IP whitelisting for ACCESS role accounts
# - Enable audit logging for all ticket validations
# - Set up alerts for suspicious validation patterns
# =============================================================================

# =============================================================================
# INTEGRATION WITH OTHER SERVICES
# =============================================================================
# This API integrates with:
# - futura-market-place-api: Reads Sales/Orders data
# - futura-access-app: Mobile/web app for scanning QR codes
# - futura-tickets-admin: Admin panel to view access stats
#
# Shared MongoDB collections:
# - accounts (ACCESS role users)
# - events (event details)
# - sales (ticket data)
# - orders (purchase data)
# =============================================================================
