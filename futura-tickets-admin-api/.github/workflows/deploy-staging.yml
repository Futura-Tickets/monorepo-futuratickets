name: Deploy to Staging - Admin API

# Trigger on pull request events
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop

# Prevent multiple deployments running simultaneously
concurrency:
  group: deploy-staging-admin-api-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/admin-api-staging
  SERVICE_NAME: 'futura-tickets-admin-api'

jobs:
  # ============================================================================
  # BUILD AND PUSH DOCKER IMAGE
  # ============================================================================
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr
            type=sha,prefix=pr-${{ github.event.pull_request.number }}-
            type=raw,value=latest-staging

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=staging
            APP_VERSION=${{ github.sha }}

      - name: Image digest
        run: echo "Image pushed with digest ${{ steps.build.outputs.digest }}"

  # ============================================================================
  # DEPLOY TO STAGING ENVIRONMENT
  # ============================================================================
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    environment:
      name: staging
      url: https://admin-api-staging.futuratickets.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ========================================================================
      # Option 1: Deploy to Azure Container Instances
      # ========================================================================
      - name: Azure Login
        if: ${{ vars.CLOUD_PROVIDER == 'azure' }}
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Container Instances
        if: ${{ vars.CLOUD_PROVIDER == 'azure' }}
        uses: azure/aci-deploy@v1
        with:
          resource-group: ${{ vars.AZURE_RESOURCE_GROUP }}
          dns-name-label: ${{ env.SERVICE_NAME }}-staging-pr-${{ github.event.pull_request.number }}
          image: ${{ needs.build.outputs.image-tag }}
          registry-login-server: ${{ env.REGISTRY }}
          registry-username: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ env.SERVICE_NAME }}-staging-pr-${{ github.event.pull_request.number }}
          location: eastus
          ports: 3000
          cpu: 1
          memory: 1.5
          environment-variables: |
            NODE_ENV=staging
            PORT=3000
          secure-environment-variables: |
            MONGO_URL=${{ secrets.STAGING_ADMIN_MONGO_URL }}
            JWT_SECRET_KEY=${{ secrets.STAGING_ADMIN_JWT_SECRET }}
            ADMIN_API_KEY=${{ secrets.STAGING_ADMIN_API_KEY }}

      # ========================================================================
      # Option 2: Deploy to AWS ECS
      # ========================================================================
      - name: Configure AWS credentials
        if: ${{ vars.CLOUD_PROVIDER == 'aws' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        if: ${{ vars.CLOUD_PROVIDER == 'aws' }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/task-definition-staging.json
          container-name: ${{ env.SERVICE_NAME }}
          image: ${{ needs.build.outputs.image-tag }}

      - name: Deploy to Amazon ECS
        if: ${{ vars.CLOUD_PROVIDER == 'aws' }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}-staging
          cluster: futura-tickets-staging
          wait-for-service-stability: true

      # ========================================================================
      # Option 3: Deploy to Kubernetes
      # ========================================================================
      - name: Setup kubectl
        if: ${{ vars.CLOUD_PROVIDER == 'kubernetes' }}
        uses: azure/setup-kubectl@v3

      - name: Set Kubernetes context
        if: ${{ vars.CLOUD_PROVIDER == 'kubernetes' }}
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy to Kubernetes
        if: ${{ vars.CLOUD_PROVIDER == 'kubernetes' }}
        run: |
          kubectl set image deployment/${{ env.SERVICE_NAME }}-staging \
            ${{ env.SERVICE_NAME }}=${{ needs.build.outputs.image-tag }} \
            --namespace=staging
          kubectl rollout status deployment/${{ env.SERVICE_NAME }}-staging \
            --namespace=staging \
            --timeout=5m

  # ============================================================================
  # HEALTH CHECK
  # ============================================================================
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: deploy

    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Check health endpoint
        run: |
          MAX_ATTEMPTS=10
          ATTEMPT=1

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Health check attempt $ATTEMPT of $MAX_ATTEMPTS"

            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
              https://admin-api-staging.futuratickets.com/health || echo "000")

            if [ "$RESPONSE" = "200" ]; then
              echo "✅ Health check passed"
              exit 0
            fi

            echo "❌ Health check failed with status $RESPONSE"
            ATTEMPT=$((ATTEMPT + 1))
            sleep 10
          done

          echo "❌ Health check failed after $MAX_ATTEMPTS attempts"
          exit 1

      - name: Check readiness endpoint
        run: |
          RESPONSE=$(curl -s https://admin-api-staging.futuratickets.com/health/ready)
          echo "Readiness response: $RESPONSE"

          STATUS=$(echo $RESPONSE | jq -r '.status')
          if [ "$STATUS" = "ok" ]; then
            echo "✅ Readiness check passed"
          else
            echo "❌ Readiness check failed"
            exit 1
          fi

  # ============================================================================
  # SMOKE TESTS
  # ============================================================================
  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: health-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run smoke tests
        run: npm run test:smoke
        env:
          API_URL: https://admin-api-staging.futuratickets.com
          TEST_ADMIN_EMAIL: ${{ secrets.STAGING_TEST_ADMIN_EMAIL }}
          TEST_ADMIN_PASSWORD: ${{ secrets.STAGING_TEST_ADMIN_PASSWORD }}

  # ============================================================================
  # COMMENT ON PR
  # ============================================================================
  comment:
    name: Comment on PR
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [deploy, health-check]
    if: always()
    permissions:
      pull-requests: write

    steps:
      - name: Create comment body
        id: comment
        run: |
          if [ "${{ needs.health-check.result }}" = "success" ]; then
            EMOJI="✅"
            STATUS="Successfully deployed"
          else
            EMOJI="❌"
            STATUS="Deployment failed"
          fi

          cat << EOF > comment.md
          ## ${EMOJI} Admin API - Staging Deployment ${STATUS}

          **PR:** #${{ github.event.pull_request.number }}
          **Commit:** ${{ github.sha }}
          **Environment:** Staging

          ### Deployment Details
          - **Service:** Admin API
          - **Image:** \`${{ needs.build.outputs.image-tag }}\`
          - **URL:** https://admin-api-staging.futuratickets.com
          - **Swagger Docs:** https://admin-api-staging.futuratickets.com/api/docs

          ### Health Status
          - Health Check: ${{ needs.health-check.result == 'success' && '✅ Passed' || '❌ Failed' }}

          ### Quick Links
          - [View Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [View Deployment](https://github.com/${{ github.repository }}/deployments)

          ---
          *Deployed by GitHub Actions*
          EOF

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('comment.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ============================================================================
  # CLEANUP (Optional)
  # ============================================================================
  cleanup:
    name: Cleanup Old Deployments
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: deploy
    if: always()

    steps:
      - name: Cleanup old staging deployments
        run: |
          echo "Cleaning up old staging deployments..."
          # Add cleanup logic here (remove old containers, etc.)
