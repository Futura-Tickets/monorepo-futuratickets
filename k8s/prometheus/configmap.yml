apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: futuratickets
  labels:
    app: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'futuratickets-prod'
        environment: 'production'

    # Alertmanager configuration
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
                - alertmanager:9093

    # Load rules once and periodically evaluate them
    rule_files:
      - '/etc/prometheus/rules/*.yml'

    # Scrape configurations
    scrape_configs:
      # Prometheus itself
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      # Kubernetes API server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      # Kubernetes nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

      # Kubernetes pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - futuratickets
        relabel_configs:
          # Only scrape pods with prometheus.io/scrape: "true" annotation
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          # Use the pod's prometheus.io/path annotation for scrape path
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          # Use the pod's prometheus.io/port annotation for port
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          # Add pod metadata as labels
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

      # FuturaTickets API (NestJS)
      - job_name: 'futura-api'
        static_configs:
          - targets: ['api:3000']
        metrics_path: '/metrics'
        relabel_configs:
          - source_labels: [__address__]
            target_label: instance
            replacement: 'api'

      # MongoDB Exporter
      - job_name: 'mongodb'
        static_configs:
          - targets: ['mongodb-exporter:9216']

      # Redis Exporter
      - job_name: 'redis'
        static_configs:
          - targets: ['redis-exporter:9121']

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: futuratickets
  labels:
    app: prometheus
data:
  api-rules.yml: |
    groups:
      - name: api_alerts
        interval: 30s
        rules:
          # High error rate
          - alert: HighErrorRate
            expr: |
              rate(http_requests_total{status=~"5.."}[5m]) > 0.05
            for: 5m
            labels:
              severity: critical
              component: api
            annotations:
              summary: "High error rate detected"
              description: "API error rate is {{ $value }}% (threshold: 5%)"

          # High latency
          - alert: HighLatency
            expr: |
              histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 1.0
            for: 5m
            labels:
              severity: warning
              component: api
            annotations:
              summary: "High latency detected"
              description: "P95 latency is {{ $value }}s (threshold: 1s)"

          # Low availability
          - alert: LowAvailability
            expr: |
              avg_over_time(up{job="futura-api"}[5m]) < 0.99
            for: 5m
            labels:
              severity: critical
              component: api
            annotations:
              summary: "API availability below 99%"
              description: "Availability is {{ $value }}%"

      - name: database_alerts
        interval: 30s
        rules:
          # MongoDB down
          - alert: MongoDBDown
            expr: up{job="mongodb"} == 0
            for: 1m
            labels:
              severity: critical
              component: database
            annotations:
              summary: "MongoDB is down"
              description: "MongoDB has been down for more than 1 minute"

          # High MongoDB connections
          - alert: HighMongoDBConnections
            expr: mongodb_connections{state="current"} > 800
            for: 5m
            labels:
              severity: warning
              component: database
            annotations:
              summary: "High MongoDB connections"
              description: "Current connections: {{ $value }} (threshold: 800)"

          # Redis down
          - alert: RedisDown
            expr: up{job="redis"} == 0
            for: 1m
            labels:
              severity: critical
              component: cache
            annotations:
              summary: "Redis is down"
              description: "Redis has been down for more than 1 minute"

      - name: pod_alerts
        interval: 30s
        rules:
          # Pod restarts
          - alert: PodRestartingTooOften
            expr: rate(kube_pod_container_status_restarts_total[15m]) > 0.1
            for: 5m
            labels:
              severity: warning
              component: kubernetes
            annotations:
              summary: "Pod restarting too often"
              description: "{{ $labels.pod }} is restarting {{ $value }} times per minute"

          # Pod crash loop
          - alert: PodCrashLooping
            expr: kube_pod_container_status_waiting_reason{reason="CrashLoopBackOff"} == 1
            for: 5m
            labels:
              severity: critical
              component: kubernetes
            annotations:
              summary: "Pod is crash looping"
              description: "{{ $labels.pod }} is in CrashLoopBackOff state"

          # Pod not ready
          - alert: PodNotReady
            expr: kube_pod_status_phase{phase!~"Running|Succeeded"} == 1
            for: 10m
            labels:
              severity: warning
              component: kubernetes
            annotations:
              summary: "Pod not ready"
              description: "{{ $labels.pod }} has been in {{ $labels.phase }} state for more than 10 minutes"

      - name: resource_alerts
        interval: 30s
        rules:
          # High CPU usage
          - alert: HighCPUUsage
            expr: |
              (sum(rate(container_cpu_usage_seconds_total{namespace="futuratickets"}[5m])) by (pod) /
              sum(container_spec_cpu_quota{namespace="futuratickets"}/container_spec_cpu_period{namespace="futuratickets"}) by (pod)) > 0.8
            for: 10m
            labels:
              severity: warning
              component: resources
            annotations:
              summary: "High CPU usage"
              description: "{{ $labels.pod }} CPU usage is {{ $value }}% (threshold: 80%)"

          # High memory usage
          - alert: HighMemoryUsage
            expr: |
              (container_memory_usage_bytes{namespace="futuratickets"} /
              container_spec_memory_limit_bytes{namespace="futuratickets"}) > 0.9
            for: 5m
            labels:
              severity: critical
              component: resources
            annotations:
              summary: "High memory usage"
              description: "{{ $labels.pod }} memory usage is {{ $value }}% (threshold: 90%)"
