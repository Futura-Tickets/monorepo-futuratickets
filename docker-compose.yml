# ========================================
# FuturaTickets - Docker Compose Development Environment
# ========================================
# This docker-compose sets up the complete local development environment
# including all microservices and dependencies

version: '3.9'

services:
  # ========================================
  # DATABASES & INFRASTRUCTURE
  # ========================================

  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: futura-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: futuraadmin
      MONGO_INITDB_ROOT_PASSWORD: futurapass123
      MONGO_INITDB_DATABASE: futuratickets
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - futura-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: futura-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass futurapass123
    volumes:
      - redis_data:/data
    networks:
      - futura-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========================================
  # BACKEND APIs (NestJS)
  # ========================================

  # Admin API - Main backend for event management
  admin-api:
    build:
      context: ./futura-tickets-admin-api
      dockerfile: Dockerfile
      target: builder
    container_name: futura-admin-api
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      MONGO_URL: mongodb://futuraadmin:futurapass123@mongodb:27017/futuratickets?authSource=admin
      JWT_SECRET_KEY: dev-jwt-secret-key-change-in-production
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: futurapass123
      CORS_ORIGINS: http://localhost:3000,http://localhost:3003
      SOCKET_IO_ORIGINS: http://localhost:3000,http://localhost:3003
    volumes:
      - ./futura-tickets-admin-api:/app
      - /app/node_modules
      - /app/dist
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - futura-network
    command: npm run start:dev

  # Marketplace API - Payments and orders
  marketplace-api:
    build:
      context: ./futura-market-place-api
      dockerfile: Dockerfile
      target: builder
    container_name: futura-marketplace-api
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      MONGO_URL: mongodb://futuraadmin:futurapass123@mongodb:27017/futuratickets?authSource=admin
      JWT_SECRET_KEY: dev-jwt-secret-key-change-in-production
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: futurapass123
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-sk_test_your_key}
      STRIPE_PUBLIC_KEY: ${STRIPE_PUBLIC_KEY:-pk_test_your_key}
      CORS_ORIGINS: http://localhost:3000,http://localhost:3003
    volumes:
      - ./futura-market-place-api:/app
      - /app/node_modules
      - /app/dist
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - futura-network
    command: npm run start:dev

  # Access API - Ticket validation
  access-api:
    build:
      context: ./futura-access-api
      dockerfile: Dockerfile
      target: builder
    container_name: futura-access-api
    restart: unless-stopped
    ports:
      - "3004:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      MONGO_URL: mongodb://futuraadmin:futurapass123@mongodb:27017/futuratickets?authSource=admin
      JWT_SECRET_KEY: dev-jwt-secret-key-change-in-production
      THROTTLE_TTL: 60000
      THROTTLE_LIMIT: 100
    volumes:
      - ./futura-access-api:/app
      - /app/node_modules
      - /app/dist
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - futura-network
    command: npm run start:dev

  # ========================================
  # FRONTEND APPS (Next.js)
  # ========================================

  # Marketplace Frontend - Public marketplace
  marketplace-web:
    build:
      context: ./futura-market-place-v2
      dockerfile: Dockerfile
      target: builder
    container_name: futura-marketplace-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_FUTURA_API: http://localhost:3001
      NEXT_PUBLIC_FUTURA: http://localhost:3002
      NEXT_PUBLIC_REFACTOR_RESALE_API: http://localhost:3002
      NEXT_PUBLIC_BLOB_URL: http://localhost:9000/images
      NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
    volumes:
      - ./futura-market-place-v2:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - admin-api
      - marketplace-api
    networks:
      - futura-network
    command: npm run dev

  # Admin Frontend - Admin panel
  admin-web:
    build:
      context: ./futura-tickets-admin
      dockerfile: Dockerfile
      target: builder
    container_name: futura-admin-web
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_FUTURA: http://localhost:3001
      NEXT_PUBLIC_FUTURA_API: http://localhost:3001
      NEXT_PUBLIC_REFACTOR_RESALE_API: http://localhost:3002
      NEXT_PUBLIC_BLOB_URL: http://localhost:9000/images
      NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
    volumes:
      - ./futura-tickets-admin:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - admin-api
      - marketplace-api
    networks:
      - futura-network
    command: npm run dev

  # ========================================
  # UTILITIES & DEVELOPMENT TOOLS
  # ========================================

  # MinIO - Local S3-compatible storage (replaces Azure Blob)
  minio:
    image: minio/minio:latest
    container_name: futura-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: futuraadmin
      MINIO_ROOT_PASSWORD: futurapass123
    volumes:
      - minio_data:/data
    networks:
      - futura-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Mongo Express - MongoDB Admin UI
  mongo-express:
    image: mongo-express:latest
    container_name: futura-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: futuraadmin
      ME_CONFIG_MONGODB_ADMINPASSWORD: futurapass123
      ME_CONFIG_MONGODB_URL: mongodb://futuraadmin:futurapass123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - futura-network

# ========================================
# NETWORKS
# ========================================
networks:
  futura-network:
    driver: bridge

# ========================================
# VOLUMES
# ========================================
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
