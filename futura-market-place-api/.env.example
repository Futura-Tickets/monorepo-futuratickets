# =============================================================================
# FUTURA MARKETPLACE API - Environment Variables
# =============================================================================
# NestJS backend for marketplace - Payments (Stripe), Orders, Email system
# Port: 4102 (default)
# =============================================================================

# -----------------------------------------------------------------------------
# APPLICATION
# -----------------------------------------------------------------------------
PORT=4102
NODE_ENV=development

# -----------------------------------------------------------------------------
# DATABASE - MongoDB
# -----------------------------------------------------------------------------
# MongoDB connection string (Atlas or local)
# Development: mongodb://localhost:27017/futuratickets
# Production: mongodb+srv://user:password@cluster.mongodb.net/futuratickets
MONGO_URL=mongodb://localhost:27017/futuratickets

# -----------------------------------------------------------------------------
# AUTHENTICATION - JWT
# -----------------------------------------------------------------------------
# Secret key for JWT token signing (CHANGE IN PRODUCTION!)
# Generate with: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
#
# CRITICAL: JWT_SECRET_KEY must be IDENTICAL across ALL APIs:
#   - futura-tickets-admin-api
#   - futura-market-place-api
#   - futura-access-api
# This ensures tokens are valid across all microservices for Single Sign-On (SSO).
#
# Example generated key: 9d2cacb7a249ce9cc1cc9b42d3259a57137012a25ee71753b6e89d78491e782f4546e5dffca3e78d8cff419308939e0c9eacce631104e6b2d2013bf55437ab5f
JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production

# -----------------------------------------------------------------------------
# PAYMENT GATEWAY - STRIPE
# -----------------------------------------------------------------------------
# Stripe API Keys (get from https://dashboard.stripe.com/apikeys)
# Test mode keys (pk_test_* / sk_test_*)
STRIPE_PUBLIC_KEY=pk_test_51234567890abcdefghijklmnopqrstuvwxyz
STRIPE_PRIVATE_KEY=sk_test_51234567890abcdefghijklmnopqrstuvwxyz

# Stripe Webhook Secret (for webhook signature verification)
# Get from: https://dashboard.stripe.com/webhooks
# Format: whsec_xxxxxxxxxxxxxxxxxxxxx
STRIPE_ENDPOINT_SECRET=whsec_1234567890abcdefghijklmnopqrstuvwxyz

# -----------------------------------------------------------------------------
# REDIS - Queue Management (Bull/BullMQ)
# -----------------------------------------------------------------------------
# Redis connection for Bull job queues (email sending, background tasks)
# Development: localhost:6379
# Production: Redis Cloud or ElastiCache
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_USERNAME=
REDIS_PASSWORD=

# -----------------------------------------------------------------------------
# EMAIL - SMTP Configuration
# -----------------------------------------------------------------------------
# SMTP server for transactional emails (order confirmations, transfers, etc.)
# Provider examples: SendGrid, Mailgun, AWS SES, Hostinger
# NOTE: Current code has hardcoded Hostinger config in mail.module.ts
#       These vars should be used instead

# SMTP Host
MAIL_HOST=smtp.hostinger.com

# SMTP Port (465 for SSL, 587 for TLS, 25 for plain)
MAIL_PORT=465

# SMTP Authentication
MAIL_USER=noreply@futuratickets.com
MAIL_PASSWORD=your-email-password

# Email sender address
MAIL_FROM=noreply@futuratickets.com

# -----------------------------------------------------------------------------
# AZURE - Blob Storage & WebSocket
# -----------------------------------------------------------------------------
# Azure Blob Storage for event images and assets
# Get from: Azure Portal > Storage Account > Access keys
AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=https;AccountName=youraccount;AccountKey=yourkey;EndpointSuffix=core.windows.net

# Azure Blob public URL base
# Format: https://youraccount.blob.core.windows.net/container
BLOB_URL=https://futuratickets.blob.core.windows.net/images

# Azure Web PubSub for WebSocket scaling (Socket.IO)
# Get from: Azure Portal > Web PubSub > Keys
# Format: Endpoint=https://...;AccessKey=...;Version=1.0;
SOCKET_MARKET_PLACE=Endpoint=https://your-pubsub.webpubsub.azure.com;AccessKey=your-access-key;Version=1.0;

# -----------------------------------------------------------------------------
# FRONTEND URLS
# -----------------------------------------------------------------------------
# Marketplace frontend URL (for email links)
# Development: http://localhost:3003
# Production: https://marketplace.futuratickets.com
FUTURA_MARKET_PLACE=http://localhost:3000

# -----------------------------------------------------------------------------
# BLOCKCHAIN (optional - read-only operations)
# -----------------------------------------------------------------------------
# Used to fetch on-chain ticket status and metadata
BLOCKCHAIN_RPC_URL=https://base-sepolia.example-rpc.io
BLOCKCHAIN_WS_URL=wss://base-sepolia.example-rpc.io/ws
BLOCKCHAIN_FACTORY_ADDRESS=0x0000000000000000000000000000000000000000
BLOCKCHAIN_CHAIN_ID=84532

# -----------------------------------------------------------------------------
# RATE LIMITING - DDoS Protection
# -----------------------------------------------------------------------------
# Throttle configuration (requests per time window)
# TTL: Time window in milliseconds (60000 = 1 minute)
# LIMIT: Max requests per window
THROTTLE_TTL=60000
THROTTLE_LIMIT=100

# -----------------------------------------------------------------------------
# ERROR TRACKING - Sentry
# -----------------------------------------------------------------------------
# Sentry DSN for error monitoring and performance tracking
# Get from: https://sentry.io/settings/projects/your-project/keys/
# Format: https://xxxxx@yyy.ingest.sentry.io/zzzzz
# Leave empty to disable Sentry
SENTRY_DSN=

# -----------------------------------------------------------------------------
# OPTIONAL - Development/Testing
# -----------------------------------------------------------------------------
# Multer file upload destination (if using local storage)
# MULTER_DEST=./uploads

# Log level (error, warn, info, debug, verbose)
# LOG_LEVEL=info

# =============================================================================
# PRODUCTION CHECKLIST
# =============================================================================
# [ ] Change JWT_SECRET_KEY to a strong random value
# [ ] Use Stripe production keys (pk_live_* / sk_live_*)
# [ ] Configure production MongoDB Atlas cluster
# [ ] Set up Redis with password authentication
# [ ] Configure production SMTP provider (SendGrid recommended)
# [ ] Set up Azure Storage with proper CORS and access policies
# [ ] Set FUTURA_MARKET_PLACE to production domain
# [ ] Configure Sentry DSN for error tracking
# [ ] Configure rate limiting for production traffic
# [ ] Enable SSL/TLS for all services
# [ ] Set NODE_ENV=production
# =============================================================================

# =============================================================================
# IMPORTANT SECURITY NOTES
# =============================================================================
# - NEVER commit this file with real values to git
# - Store production secrets in secure vault (AWS Secrets Manager, Azure Key Vault)
# - Rotate secrets regularly (JWT keys, API keys, passwords)
# - Use different keys for development/staging/production
# - Enable 2FA on Stripe and Azure accounts
# - Monitor webhook endpoints for suspicious activity
# =============================================================================
