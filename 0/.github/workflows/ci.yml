name: CI Pipeline

# Trigger on push to any branch and on pull requests
on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main
      - develop

# Cancel in-progress runs if a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  CACHE_KEY: node-modules-${{ hashFiles('**/package-lock.json') }}

jobs:
  # ============================================================================
  # LINT JOB
  # ============================================================================
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Check code formatting (Prettier)
        run: npm run format:check
        continue-on-error: false

      # Upload lint results as artifact
      - name: Upload lint results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: |
            eslint-report.json
            .eslintcache

  # ============================================================================
  # TEST JOB
  # ============================================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [18, 20]
        # Add more Node versions if needed

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --coverage --maxWorkers=2
        env:
          NODE_ENV: test

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        if: matrix.node-version == 20
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      # Upload coverage reports as artifacts
      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-node-${{ matrix.node-version }}
          path: coverage/
          retention-days: 7

      # Check coverage thresholds
      - name: Check coverage thresholds
        run: |
          COVERAGE=$(node -p "require('./coverage/coverage-summary.json').total.lines.pct")
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "❌ Coverage is below 70% threshold"
            exit 1
          else
            echo "✅ Coverage meets 70% threshold"
          fi

  # ============================================================================
  # BUILD JOB
  # ============================================================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check build output
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ Build failed: dist directory not found"
            exit 1
          fi
          if [ ! -f "dist/main.js" ]; then
            echo "❌ Build failed: main.js not found"
            exit 1
          fi
          echo "✅ Build successful"

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # ============================================================================
  # TYPE CHECK JOB
  # ============================================================================
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript compiler
        run: npx tsc --noEmit
        continue-on-error: false

  # ============================================================================
  # DEPENDENCY AUDIT JOB
  # ============================================================================
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for vulnerabilities
        run: |
          VULNERABILITIES=$(npm audit --json | jq '.metadata.vulnerabilities.total')
          echo "Total vulnerabilities: $VULNERABILITIES"
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "⚠️ Security vulnerabilities found"
            npm audit
          else
            echo "✅ No vulnerabilities found"
          fi

  # ============================================================================
  # DOCKER BUILD JOB (Optional)
  # ============================================================================
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: 0:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm 0:test node --version

  # ============================================================================
  # CODE QUALITY JOB
  # ============================================================================
  quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # SonarCloud scan (optional - requires SonarCloud account)
      - name: SonarCloud Scan
        if: ${{ secrets.SONAR_TOKEN != '' }}
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ============================================================================
  # SUMMARY JOB
  # ============================================================================
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, build, typecheck, audit]
    if: always()

    steps:
      - name: Check job statuses
        run: |
          echo "## CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| TypeCheck | ${{ needs.typecheck.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Audit | ${{ needs.audit.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: Fail if any job failed
        if: |
          needs.lint.result == 'failure' ||
          needs.test.result == 'failure' ||
          needs.build.result == 'failure' ||
          needs.typecheck.result == 'failure'
        run: |
          echo "❌ One or more CI jobs failed"
          exit 1

      - name: Success message
        if: |
          needs.lint.result == 'success' &&
          needs.test.result == 'success' &&
          needs.build.result == 'success' &&
          needs.typecheck.result == 'success'
        run: |
          echo "✅ All CI jobs passed successfully!"

# ============================================================================
# NOTIFICATIONS (Optional)
# ============================================================================
# Uncomment to send notifications to Slack, Discord, etc.
#
#  notify:
#    name: Send Notifications
#    runs-on: ubuntu-latest
#    needs: [ci-summary]
#    if: always()
#
#    steps:
#      - name: Send Slack notification
#        uses: 8398a7/action-slack@v3
#        with:
#          status: ${{ job.status }}
#          text: 'CI Pipeline ${{ job.status }}'
#          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
