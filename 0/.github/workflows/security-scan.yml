name: Security Scanning

# Run security scans on schedule, PR, and manual trigger
on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - main
  workflow_dispatch:

# Prevent multiple scans running simultaneously
concurrency:
  group: security-scan-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'

jobs:
  # ============================================================================
  # DEPENDENCY SCANNING
  # ============================================================================
  dependency-scan:
    name: Scan Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # NPM Audit
      - name: Run npm audit
        run: |
          npm audit --json > npm-audit.json || true
          cat npm-audit.json

      - name: Parse npm audit results
        run: |
          CRITICAL=$(jq '.metadata.vulnerabilities.critical' npm-audit.json)
          HIGH=$(jq '.metadata.vulnerabilities.high' npm-audit.json)
          MODERATE=$(jq '.metadata.vulnerabilities.moderate' npm-audit.json)
          LOW=$(jq '.metadata.vulnerabilities.low' npm-audit.json)

          echo "## Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
          echo "| High | $HIGH |" >> $GITHUB_STEP_SUMMARY
          echo "| Moderate | $MODERATE |" >> $GITHUB_STEP_SUMMARY
          echo "| Low | $LOW |" >> $GITHUB_STEP_SUMMARY

          # Fail if critical or high vulnerabilities found
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "❌ Critical or high severity vulnerabilities found!"
            exit 1
          fi

      # Snyk Security Scan
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-report.json

      - name: Upload Snyk report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report
          path: snyk-report.json

      # OWASP Dependency Check
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'FuturaTickets Access API'
          path: '.'
          format: 'HTML'
          out: 'dependency-check-report'

      - name: Upload OWASP report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check
          path: dependency-check-report

  # ============================================================================
  # CODE SCANNING (SAST)
  # ============================================================================
  code-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # ESLint Security Plugin
      - name: Run ESLint security rules
        run: |
          npm install eslint-plugin-security --save-dev
          npx eslint . --ext .ts,.js --format json --output-file eslint-security.json || true
          cat eslint-security.json

      - name: Upload ESLint results
        uses: actions/upload-artifact@v4
        with:
          name: eslint-security
          path: eslint-security.json

      # Semgrep SAST
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/nodejs
            p/typescript
          generateSarif: true

      - name: Upload Semgrep SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  # ============================================================================
  # SECRET SCANNING
  # ============================================================================
  secret-scan:
    name: Scan for Secrets
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # GitGuardian Secret Scan
      - name: GitGuardian scan
        uses: GitGuardian/ggshield-action@master
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

      # Gitleaks Secret Scan
      - name: Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      # TruffleHog Secret Scan
      - name: TruffleHog scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # ============================================================================
  # DOCKER IMAGE SCANNING
  # ============================================================================
  image-scan:
    name: Scan Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t 0:scan .

      # Trivy vulnerability scanner
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 0:scan
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      # Grype vulnerability scanner
      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: 0:scan
          fail-build: true
          severity-cutoff: high

      # Docker Scout
      - name: Docker Scout scan
        uses: docker/scout-action@v1
        with:
          command: cves
          image: 0:scan
          only-severities: critical,high
          exit-code: true

  # ============================================================================
  # LICENSE COMPLIANCE
  # ============================================================================
  license-check:
    name: Check License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check licenses
        run: |
          license-checker --json --out licenses.json
          license-checker --summary

      - name: Check for forbidden licenses
        run: |
          # List of forbidden licenses
          FORBIDDEN_LICENSES=("GPL" "AGPL" "LGPL")

          for license in "${FORBIDDEN_LICENSES[@]}"; do
            if grep -q "$license" licenses.json; then
              echo "❌ Forbidden license found: $license"
              exit 1
            fi
          done

          echo "✅ No forbidden licenses found"

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json

  # ============================================================================
  # SECURITY HEADERS CHECK
  # ============================================================================
  security-headers:
    name: Check Security Headers
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name != 'pull_request'

    steps:
      - name: Check security headers
        run: |
          echo "Checking security headers on production..."

          # Check if URL is reachable
          if ! curl -Is https://access-api.futuratickets.com/health > /dev/null 2>&1; then
            echo "⚠️ Production URL not reachable, skipping header check"
            exit 0
          fi

          # Check for security headers
          HEADERS=$(curl -Is https://access-api.futuratickets.com/health)

          echo "$HEADERS"

          # Check for important security headers
          if ! echo "$HEADERS" | grep -i "X-Content-Type-Options"; then
            echo "❌ Missing X-Content-Type-Options header"
            exit 1
          fi

          if ! echo "$HEADERS" | grep -i "X-Frame-Options"; then
            echo "⚠️ Missing X-Frame-Options header"
          fi

          if ! echo "$HEADERS" | grep -i "Strict-Transport-Security"; then
            echo "⚠️ Missing Strict-Transport-Security header"
          fi

          echo "✅ Security headers check complete"

  # ============================================================================
  # GENERATE SECURITY REPORT
  # ============================================================================
  report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [dependency-scan, code-scan, secret-scan, license-check]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate summary report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "" >> security-report.md
          echo "**Date:** $(date)" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Scan Results" >> security-report.md
          echo "" >> security-report.md
          echo "| Scan Type | Status |" >> security-report.md
          echo "|-----------|--------|" >> security-report.md
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> security-report.md
          echo "| Code Scan | ${{ needs.code-scan.result }} |" >> security-report.md
          echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> security-report.md
          echo "| License Check | ${{ needs.license-check.result }} |" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: Create issue for failures
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔒 Security Scan Failed',
              body: `Security scan failed on commit ${context.sha}.\n\nPlease review the [workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).`,
              labels: ['security', 'automated']
            });

# ============================================================================
# NOTIFICATIONS
# ============================================================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [dependency-scan, code-scan, secret-scan]
    if: failure()

    steps:
      - name: Send Slack alert
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🚨 Security Scan Alert",
              attachments: [{
                color: 'danger',
                text: `Security vulnerabilities detected in ${process.env.AS_REPO}\nCommit: ${process.env.AS_COMMIT}\nBranch: ${process.env.AS_REF}`
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK_SECURITY }}
