#!/bin/bash
# Pre-commit hook template for FuturaTickets
# To enable: cp .git-hooks/pre-commit.template .git/hooks/pre-commit && chmod +x .git/hooks/pre-commit

echo "üîç Running pre-commit checks..."

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# Check if there are staged files
if [ -z "$STAGED_FILES" ]; then
    echo -e "${YELLOW}No staged files to check${NC}"
    exit 0
fi

# Function to check for secrets
check_secrets() {
    echo -n "üîí Checking for secrets... "

    # Check for common secret patterns
    if echo "$STAGED_FILES" | grep -E '\.(env|credentials|secrets)' > /dev/null; then
        echo -e "${RED}‚úó BLOCKED${NC}"
        echo "‚ùå Attempting to commit sensitive files:"
        echo "$STAGED_FILES" | grep -E '\.(env|credentials|secrets)'
        echo ""
        echo "üí° Add these to .gitignore instead"
        return 1
    fi

    # Check for hardcoded secrets in code
    for file in $STAGED_FILES; do
        if [ -f "$file" ]; then
            # Check for API keys, tokens, passwords
            if grep -qE '(api[_-]?key|secret[_-]?key|password|bearer|token|private[_-]?key)\s*=\s*["\x27][A-Za-z0-9+/=]{20,}' "$file"; then
                echo -e "${RED}‚úó BLOCKED${NC}"
                echo "‚ùå Possible hardcoded secret in: $file"
                echo "üí° Use environment variables instead"
                return 1
            fi
        fi
    done

    echo -e "${GREEN}‚úì OK${NC}"
    return 0
}

# Function to run linting on changed files
check_linting() {
    echo -n "üîç Running ESLint on staged files... "

    # Get TypeScript/JavaScript files
    TS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(ts|tsx|js|jsx)$' || true)

    if [ -z "$TS_FILES" ]; then
        echo -e "${YELLOW}‚äò SKIPPED${NC} (no TS/JS files)"
        return 0
    fi

    # Run ESLint (quiet mode, only errors)
    if npx eslint $TS_FILES --quiet 2>/dev/null; then
        echo -e "${GREEN}‚úì OK${NC}"
        return 0
    else
        echo -e "${RED}‚úó FAILED${NC}"
        echo "‚ùå Linting errors found. Run: npm run lint -- --fix"
        return 1
    fi
}

# Function to check TypeScript compilation
check_typescript() {
    echo -n "üìò Checking TypeScript... "

    # Get TypeScript files
    TS_FILES=$(echo "$STAGED_FILES" | grep -E '\.tsx?$' || true)

    if [ -z "$TS_FILES" ]; then
        echo -e "${YELLOW}‚äò SKIPPED${NC} (no TS files)"
        return 0
    fi

    # Quick type check (only on staged files)
    if npx tsc --noEmit --skipLibCheck $TS_FILES 2>/dev/null; then
        echo -e "${GREEN}‚úì OK${NC}"
        return 0
    else
        echo -e "${RED}‚úó FAILED${NC}"
        echo "‚ùå TypeScript errors found. Fix before committing."
        return 1
    fi
}

# Function to check for console.log statements
check_console_logs() {
    echo -n "üö´ Checking for console.log... "

    # Get TypeScript/JavaScript files
    CODE_FILES=$(echo "$STAGED_FILES" | grep -E '\.(ts|tsx|js|jsx)$' || true)

    if [ -z "$CODE_FILES" ]; then
        echo -e "${YELLOW}‚äò SKIPPED${NC}"
        return 0
    fi

    # Check for console.log (excluding commented lines)
    for file in $CODE_FILES; do
        if [ -f "$file" ]; then
            if grep -nE '^\s*console\.(log|debug|info|warn)' "$file" > /dev/null; then
                echo -e "${YELLOW}‚ö† WARNING${NC}"
                echo "‚ö†Ô∏è  Found console.log in: $file"
                echo "üí° Consider using a proper logger or removing before commit"
                # Don't block, just warn
            fi
        fi
    done

    echo -e "${GREEN}‚úì OK${NC}"
    return 0
}

# Function to check file size
check_file_size() {
    echo -n "üì¶ Checking file sizes... "

    MAX_SIZE=$((5 * 1024 * 1024)) # 5 MB

    for file in $STAGED_FILES; do
        if [ -f "$file" ]; then
            SIZE=$(wc -c < "$file")
            if [ $SIZE -gt $MAX_SIZE ]; then
                echo -e "${RED}‚úó BLOCKED${NC}"
                echo "‚ùå File too large: $file ($(($SIZE / 1024 / 1024)) MB)"
                echo "üí° Use Git LFS for large files"
                return 1
            fi
        fi
    done

    echo -e "${GREEN}‚úì OK${NC}"
    return 0
}

# Run all checks
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

check_secrets || exit 1
check_file_size || exit 1
check_console_logs # Warning only
check_linting || exit 1
# check_typescript || exit 1  # Uncomment to enforce type checking

echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo -e "${GREEN}‚úÖ All checks passed! Proceeding with commit...${NC}"
echo ""

exit 0
